<?php

namespace app\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\Products;
use yii\data\ArrayDataProvider;

/**
 * StatisticSearch represents the model behind the search form of `app\models\Products`.
 */
class StatisticSearch extends Products
{
    /**
     * {@inheritdoc}
     */

    public $title;
    public $date;
    public $sales;
    public $amount;

    public function rules()
    {
        return [
            [['id', 'user_id', 'category', 'limit', 'hits', 'tatng_votes', 'active_promo', 'sales', 'amount'], 'integer'],
            [['title', 'file', 'tags', 'photos', 'project_info', 'project_path', 'themes', 'themes_index', 'created_at'], 'safe'],
            [['file_size', 'price', 'sales', 'rating'], 'number'],
            [['state', 'deleted'], 'boolean'],
            [['amount', 'sales'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }


    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $userid = Yii::$app->user->id;

        //$query = Products::find();

        /* --------------------------------------*/
        $query = Products::find()->joinWith('transactions', 'transaction.prod_id = products.id')
          ->andWhere(['transaction.action_user' => $userid])->andWhere(['transaction.type' => 1]);
         /*-------------------------------------- */

        //$subQuery = Transaction::find()->select(['action_user', 'SUM(amount) as sumamount'])->/*groupBy('action_user')->*/where(['action_user' => Yii::$app->user->id]);

        //dump($subQuery->count());
        //$query->joinWith(['transactions'], ['transaction.action_user => '.Yii::$app->user->id.'']);
        //$query->leftJoin(["salesSum" => $subQuery], 'salesSum.action_user = '.Yii::$app->user->id.'');

        //dump($query->all());

        //$subQuery = TopicTag::find()->select('tag_id, COUNT(tag_id) as topic_count')->groupBy('tag_id');
        //$query->leftJoin(["topicSum" => $subQuery], '"topicSum".tag_id = id');

        //$query = Products::find()->leftJoin('transaction', ['transaction.prod_id' => 'products.id', 'transaction.action_user' => Yii::$app->user->id, 'transaction.type' => 1]);
        // add conditions that should always apply here

        //$sort = Yii::$app->request->get('sort');

        //if($sort == 'sales') $order = 'SORT_ASC';
        //if($sort == '-sales') $order = 'SORT_DESC';

        //S$query->orderBy(['transaction.action_user' => SORT_ASC]);

        $dataProvider = new ActiveDataProvider([
        'query' => $query,
        ]);



        $dataProvider->setSort([
            'attributes' => [
                'title' => [
                    'asc' => ['title' => SORT_ASC],
                    'desc' => ['title' => SORT_DESC],
                    'label' => 'Title',
                    'default' => SORT_ASC
                ],
                'date' => [
                    'asc' => ['created_at' => SORT_ASC],
                    'desc' => ['created_at' => SORT_DESC],
                    'label' => 'Sales',
                    'default' => SORT_ASC
                ],
                'sales' => [
                    'asc' => ['salesSum.sales' => SORT_ASC],
                    'desc' => ['salesSum.sales' => SORT_DESC],
                    'label' => 'Sales',
                    'default' => SORT_ASC
                ],
                'amount' => [
                    'asc' => ['transaction.amount' => SORT_ASC],
                    'desc' => ['transaction.amount' => SORT_DESC],
                    'label' => 'Sum',
                    'default' => SORT_ASC
                ],
            ]
        ]);

        if (!$this->load($params) && $this->validate()) {

            //$query->joinWith(['transactions']);

            $subQuery = Transaction::find()
                ->select(['action_user', 'SUM(amount) as amounts'])
                ->groupBy('action_user')->where(['action_user' => Yii::$app->user->id]);
            //$subQuery = Transaction::find()->select(['action_user', 'SUM(amount) as amounts', 'COUNT(action_user) as sales'])->groupBy('action_user')->where(['action_user' => Yii::$app->user->id]);
            $query->leftJoin(["salesSum" => $subQuery], 'salesSum.action_user = '.Yii::$app->user->id.'');

            return $dataProvider;
        };

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            //$query->joinWith(['products']);
            return $dataProvider;
        }

        $from_date = Yii::$app->request->get('from_date'); //Мнинимальная дкта
        $to_date = Yii::$app->request->get('to_date'); //Максимальная дата
        // grid filtering conditions

        $query->andFilterWhere([
            'user_id' => Yii::$app->user->id,
            'transaction.action_user' => Yii::$app->user->id,
            'transaction.type' => 1,
            //'title' => $this->title,
          //  'category' => $this->category,
          //  'category' => $this->category,
          //  'file_size' => $this->file_size,
          //  'price' => $this->price,
          //  'limit' => $this->limit,
          //  'hits' => $this->hits,
          //  'sales' => $this->sales,
          //  'rating' => $this->rating,
          //  'tatng_votes' => $this->tatng_votes,
          //  'state' => $this->state,
          //  'deleted' => $this->deleted,
          //  'created_at' => $this->created_at,
          //  'active_promo' => $this->active_promo,
        ]);

        $query->andFilterWhere(['like', 'title', $this->title])
           ->andFilterWhere(['between', 'transaction.created_at', $from_date, $to_date.' 23:59:59']);
           // ->andFilterWhere(['like', 'tags', $this->tags])
           // ->andFilterWhere(['like', 'photos', $this->photos])
           // ->andFilterWhere(['like', 'project_info', $this->project_info])
           // ->andFilterWhere(['like', 'project_path', $this->project_path])
           // ->andFilterWhere(['like', 'themes', $this->themes])
           //->andFilterWhere(['transaction.type' => 1]);
           // ->andFilterWhere(['like', 'themes_index', $this->themes_index]);
        //dump($query);

        return $dataProvider;

    }
}
